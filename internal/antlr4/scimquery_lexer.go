// Code generated from internal/antlr4/SCIMQuery.g4 by ANTLR 4.13.2. DO NOT EDIT.

package parser

import (
	"fmt"
	"github.com/antlr4-go/antlr/v4"
	"sync"
	"unicode"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = sync.Once{}
var _ = unicode.IsLetter

type SCIMQueryLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var SCIMQueryLexerLexerStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	ChannelNames           []string
	ModeNames              []string
	LiteralNames           []string
	SymbolicNames          []string
	RuleNames              []string
	PredictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func scimquerylexerLexerInit() {
	staticData := &SCIMQueryLexerLexerStaticData
	staticData.ChannelNames = []string{
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	}
	staticData.ModeNames = []string{
		"DEFAULT_MODE",
	}
	staticData.LiteralNames = []string{
		"", "'pr'", "'[f64]'", "'[i64]'", "'[ui64]'", "'[i]'", "'[ui]'", "'[i32]'",
		"'[ui32]'", "'[d]'", "'[s]'", "'[f32]'", "'.'", "'-'", "'['", "']'",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "'('", "')'", "", "'\\n'",
	}
	staticData.SymbolicNames = []string{
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "NOT",
		"LOGICAL_OPERATOR", "BOOLEAN", "NULL", "IN", "EQ", "NE", "GT", "LT",
		"GE", "LE", "CO", "SW", "EW", "ATTRNAME", "STRING", "DOUBLE", "INT",
		"LPAREN", "RPAREN", "EXP", "NEWLINE", "COMMA", "SP",
	}
	staticData.RuleNames = []string{
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8",
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "NOT", "LOGICAL_OPERATOR",
		"BOOLEAN", "NULL", "IN", "EQ", "NE", "GT", "LT", "GE", "LE", "CO", "SW",
		"EW", "ATTRNAME", "ATTR_NAME_CHAR", "DIGIT", "ALPHA", "STRING", "ESC",
		"UNICODE", "DOUBLE", "INT", "LPAREN", "RPAREN", "EXP", "NEWLINE", "COMMA",
		"SP",
	}
	staticData.PredictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 0, 39, 333, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2,
		4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2,
		10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15,
		7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7,
		20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25,
		2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2,
		31, 7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36,
		7, 36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7,
		41, 2, 42, 7, 42, 2, 43, 7, 43, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 3, 1, 3, 1, 3, 1,
		3, 1, 3, 1, 3, 1, 3, 1, 4, 1, 4, 1, 4, 1, 4, 1, 5, 1, 5, 1, 5, 1, 5, 1,
		5, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1,
		7, 1, 7, 1, 8, 1, 8, 1, 8, 1, 8, 1, 9, 1, 9, 1, 9, 1, 9, 1, 10, 1, 10,
		1, 10, 1, 10, 1, 10, 1, 10, 1, 11, 1, 11, 1, 12, 1, 12, 1, 13, 1, 13, 1,
		14, 1, 14, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 3, 15, 162, 8, 15,
		1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 3, 16, 169, 8, 16, 1, 17, 1, 17, 1,
		17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 3, 17, 180, 8, 17, 1, 18,
		1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 3, 18, 189, 8, 18, 1, 19, 1,
		19, 1, 19, 1, 19, 3, 19, 195, 8, 19, 1, 20, 1, 20, 1, 20, 1, 20, 3, 20,
		201, 8, 20, 1, 21, 1, 21, 1, 21, 1, 21, 3, 21, 207, 8, 21, 1, 22, 1, 22,
		1, 22, 1, 22, 3, 22, 213, 8, 22, 1, 23, 1, 23, 1, 23, 1, 23, 3, 23, 219,
		8, 23, 1, 24, 1, 24, 1, 24, 1, 24, 3, 24, 225, 8, 24, 1, 25, 1, 25, 1,
		25, 1, 25, 3, 25, 231, 8, 25, 1, 26, 1, 26, 1, 26, 1, 26, 3, 26, 237, 8,
		26, 1, 27, 1, 27, 1, 27, 1, 27, 3, 27, 243, 8, 27, 1, 28, 1, 28, 1, 28,
		1, 28, 3, 28, 249, 8, 28, 1, 29, 1, 29, 5, 29, 253, 8, 29, 10, 29, 12,
		29, 256, 9, 29, 1, 30, 1, 30, 1, 30, 3, 30, 261, 8, 30, 1, 31, 1, 31, 1,
		32, 1, 32, 1, 33, 1, 33, 1, 33, 5, 33, 270, 8, 33, 10, 33, 12, 33, 273,
		9, 33, 1, 33, 1, 33, 1, 34, 1, 34, 1, 34, 3, 34, 280, 8, 34, 1, 35, 1,
		35, 1, 35, 1, 36, 3, 36, 286, 8, 36, 1, 36, 1, 36, 1, 36, 4, 36, 291, 8,
		36, 11, 36, 12, 36, 292, 1, 36, 3, 36, 296, 8, 36, 1, 37, 1, 37, 1, 37,
		5, 37, 301, 8, 37, 10, 37, 12, 37, 304, 9, 37, 3, 37, 306, 8, 37, 1, 38,
		1, 38, 1, 39, 1, 39, 1, 40, 1, 40, 3, 40, 314, 8, 40, 1, 40, 1, 40, 1,
		41, 1, 41, 1, 42, 1, 42, 5, 42, 322, 8, 42, 10, 42, 12, 42, 325, 9, 42,
		1, 43, 1, 43, 5, 43, 329, 8, 43, 10, 43, 12, 43, 332, 9, 43, 0, 0, 44,
		1, 1, 3, 2, 5, 3, 7, 4, 9, 5, 11, 6, 13, 7, 15, 8, 17, 9, 19, 10, 21, 11,
		23, 12, 25, 13, 27, 14, 29, 15, 31, 16, 33, 17, 35, 18, 37, 19, 39, 20,
		41, 21, 43, 22, 45, 23, 47, 24, 49, 25, 51, 26, 53, 27, 55, 28, 57, 29,
		59, 30, 61, 0, 63, 0, 65, 0, 67, 31, 69, 0, 71, 0, 73, 32, 75, 33, 77,
		34, 79, 35, 81, 36, 83, 37, 85, 38, 87, 39, 1, 0, 9, 3, 0, 45, 45, 58,
		58, 95, 95, 1, 0, 48, 57, 2, 0, 65, 90, 97, 122, 2, 0, 34, 34, 92, 92,
		8, 0, 34, 34, 47, 47, 92, 92, 98, 98, 102, 102, 110, 110, 114, 114, 116,
		116, 3, 0, 48, 57, 65, 70, 97, 102, 1, 0, 49, 57, 2, 0, 69, 69, 101, 101,
		2, 0, 43, 43, 45, 45, 355, 0, 1, 1, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 5, 1,
		0, 0, 0, 0, 7, 1, 0, 0, 0, 0, 9, 1, 0, 0, 0, 0, 11, 1, 0, 0, 0, 0, 13,
		1, 0, 0, 0, 0, 15, 1, 0, 0, 0, 0, 17, 1, 0, 0, 0, 0, 19, 1, 0, 0, 0, 0,
		21, 1, 0, 0, 0, 0, 23, 1, 0, 0, 0, 0, 25, 1, 0, 0, 0, 0, 27, 1, 0, 0, 0,
		0, 29, 1, 0, 0, 0, 0, 31, 1, 0, 0, 0, 0, 33, 1, 0, 0, 0, 0, 35, 1, 0, 0,
		0, 0, 37, 1, 0, 0, 0, 0, 39, 1, 0, 0, 0, 0, 41, 1, 0, 0, 0, 0, 43, 1, 0,
		0, 0, 0, 45, 1, 0, 0, 0, 0, 47, 1, 0, 0, 0, 0, 49, 1, 0, 0, 0, 0, 51, 1,
		0, 0, 0, 0, 53, 1, 0, 0, 0, 0, 55, 1, 0, 0, 0, 0, 57, 1, 0, 0, 0, 0, 59,
		1, 0, 0, 0, 0, 67, 1, 0, 0, 0, 0, 73, 1, 0, 0, 0, 0, 75, 1, 0, 0, 0, 0,
		77, 1, 0, 0, 0, 0, 79, 1, 0, 0, 0, 0, 81, 1, 0, 0, 0, 0, 83, 1, 0, 0, 0,
		0, 85, 1, 0, 0, 0, 0, 87, 1, 0, 0, 0, 1, 89, 1, 0, 0, 0, 3, 92, 1, 0, 0,
		0, 5, 98, 1, 0, 0, 0, 7, 104, 1, 0, 0, 0, 9, 111, 1, 0, 0, 0, 11, 115,
		1, 0, 0, 0, 13, 120, 1, 0, 0, 0, 15, 126, 1, 0, 0, 0, 17, 133, 1, 0, 0,
		0, 19, 137, 1, 0, 0, 0, 21, 141, 1, 0, 0, 0, 23, 147, 1, 0, 0, 0, 25, 149,
		1, 0, 0, 0, 27, 151, 1, 0, 0, 0, 29, 153, 1, 0, 0, 0, 31, 161, 1, 0, 0,
		0, 33, 168, 1, 0, 0, 0, 35, 179, 1, 0, 0, 0, 37, 188, 1, 0, 0, 0, 39, 194,
		1, 0, 0, 0, 41, 200, 1, 0, 0, 0, 43, 206, 1, 0, 0, 0, 45, 212, 1, 0, 0,
		0, 47, 218, 1, 0, 0, 0, 49, 224, 1, 0, 0, 0, 51, 230, 1, 0, 0, 0, 53, 236,
		1, 0, 0, 0, 55, 242, 1, 0, 0, 0, 57, 248, 1, 0, 0, 0, 59, 250, 1, 0, 0,
		0, 61, 260, 1, 0, 0, 0, 63, 262, 1, 0, 0, 0, 65, 264, 1, 0, 0, 0, 67, 266,
		1, 0, 0, 0, 69, 276, 1, 0, 0, 0, 71, 281, 1, 0, 0, 0, 73, 285, 1, 0, 0,
		0, 75, 305, 1, 0, 0, 0, 77, 307, 1, 0, 0, 0, 79, 309, 1, 0, 0, 0, 81, 311,
		1, 0, 0, 0, 83, 317, 1, 0, 0, 0, 85, 319, 1, 0, 0, 0, 87, 326, 1, 0, 0,
		0, 89, 90, 5, 112, 0, 0, 90, 91, 5, 114, 0, 0, 91, 2, 1, 0, 0, 0, 92, 93,
		5, 91, 0, 0, 93, 94, 5, 102, 0, 0, 94, 95, 5, 54, 0, 0, 95, 96, 5, 52,
		0, 0, 96, 97, 5, 93, 0, 0, 97, 4, 1, 0, 0, 0, 98, 99, 5, 91, 0, 0, 99,
		100, 5, 105, 0, 0, 100, 101, 5, 54, 0, 0, 101, 102, 5, 52, 0, 0, 102, 103,
		5, 93, 0, 0, 103, 6, 1, 0, 0, 0, 104, 105, 5, 91, 0, 0, 105, 106, 5, 117,
		0, 0, 106, 107, 5, 105, 0, 0, 107, 108, 5, 54, 0, 0, 108, 109, 5, 52, 0,
		0, 109, 110, 5, 93, 0, 0, 110, 8, 1, 0, 0, 0, 111, 112, 5, 91, 0, 0, 112,
		113, 5, 105, 0, 0, 113, 114, 5, 93, 0, 0, 114, 10, 1, 0, 0, 0, 115, 116,
		5, 91, 0, 0, 116, 117, 5, 117, 0, 0, 117, 118, 5, 105, 0, 0, 118, 119,
		5, 93, 0, 0, 119, 12, 1, 0, 0, 0, 120, 121, 5, 91, 0, 0, 121, 122, 5, 105,
		0, 0, 122, 123, 5, 51, 0, 0, 123, 124, 5, 50, 0, 0, 124, 125, 5, 93, 0,
		0, 125, 14, 1, 0, 0, 0, 126, 127, 5, 91, 0, 0, 127, 128, 5, 117, 0, 0,
		128, 129, 5, 105, 0, 0, 129, 130, 5, 51, 0, 0, 130, 131, 5, 50, 0, 0, 131,
		132, 5, 93, 0, 0, 132, 16, 1, 0, 0, 0, 133, 134, 5, 91, 0, 0, 134, 135,
		5, 100, 0, 0, 135, 136, 5, 93, 0, 0, 136, 18, 1, 0, 0, 0, 137, 138, 5,
		91, 0, 0, 138, 139, 5, 115, 0, 0, 139, 140, 5, 93, 0, 0, 140, 20, 1, 0,
		0, 0, 141, 142, 5, 91, 0, 0, 142, 143, 5, 102, 0, 0, 143, 144, 5, 51, 0,
		0, 144, 145, 5, 50, 0, 0, 145, 146, 5, 93, 0, 0, 146, 22, 1, 0, 0, 0, 147,
		148, 5, 46, 0, 0, 148, 24, 1, 0, 0, 0, 149, 150, 5, 45, 0, 0, 150, 26,
		1, 0, 0, 0, 151, 152, 5, 91, 0, 0, 152, 28, 1, 0, 0, 0, 153, 154, 5, 93,
		0, 0, 154, 30, 1, 0, 0, 0, 155, 156, 5, 110, 0, 0, 156, 157, 5, 111, 0,
		0, 157, 162, 5, 116, 0, 0, 158, 159, 5, 78, 0, 0, 159, 160, 5, 79, 0, 0,
		160, 162, 5, 84, 0, 0, 161, 155, 1, 0, 0, 0, 161, 158, 1, 0, 0, 0, 162,
		32, 1, 0, 0, 0, 163, 164, 5, 97, 0, 0, 164, 165, 5, 110, 0, 0, 165, 169,
		5, 100, 0, 0, 166, 167, 5, 111, 0, 0, 167, 169, 5, 114, 0, 0, 168, 163,
		1, 0, 0, 0, 168, 166, 1, 0, 0, 0, 169, 34, 1, 0, 0, 0, 170, 171, 5, 116,
		0, 0, 171, 172, 5, 114, 0, 0, 172, 173, 5, 117, 0, 0, 173, 180, 5, 101,
		0, 0, 174, 175, 5, 102, 0, 0, 175, 176, 5, 97, 0, 0, 176, 177, 5, 108,
		0, 0, 177, 178, 5, 115, 0, 0, 178, 180, 5, 101, 0, 0, 179, 170, 1, 0, 0,
		0, 179, 174, 1, 0, 0, 0, 180, 36, 1, 0, 0, 0, 181, 182, 5, 110, 0, 0, 182,
		183, 5, 117, 0, 0, 183, 184, 5, 108, 0, 0, 184, 189, 5, 108, 0, 0, 185,
		186, 5, 110, 0, 0, 186, 187, 5, 105, 0, 0, 187, 189, 5, 108, 0, 0, 188,
		181, 1, 0, 0, 0, 188, 185, 1, 0, 0, 0, 189, 38, 1, 0, 0, 0, 190, 191, 5,
		73, 0, 0, 191, 195, 5, 78, 0, 0, 192, 193, 5, 105, 0, 0, 193, 195, 5, 110,
		0, 0, 194, 190, 1, 0, 0, 0, 194, 192, 1, 0, 0, 0, 195, 40, 1, 0, 0, 0,
		196, 197, 5, 101, 0, 0, 197, 201, 5, 113, 0, 0, 198, 199, 5, 69, 0, 0,
		199, 201, 5, 81, 0, 0, 200, 196, 1, 0, 0, 0, 200, 198, 1, 0, 0, 0, 201,
		42, 1, 0, 0, 0, 202, 203, 5, 110, 0, 0, 203, 207, 5, 101, 0, 0, 204, 205,
		5, 78, 0, 0, 205, 207, 5, 69, 0, 0, 206, 202, 1, 0, 0, 0, 206, 204, 1,
		0, 0, 0, 207, 44, 1, 0, 0, 0, 208, 209, 5, 103, 0, 0, 209, 213, 5, 116,
		0, 0, 210, 211, 5, 71, 0, 0, 211, 213, 5, 84, 0, 0, 212, 208, 1, 0, 0,
		0, 212, 210, 1, 0, 0, 0, 213, 46, 1, 0, 0, 0, 214, 215, 5, 108, 0, 0, 215,
		219, 5, 116, 0, 0, 216, 217, 5, 76, 0, 0, 217, 219, 5, 84, 0, 0, 218, 214,
		1, 0, 0, 0, 218, 216, 1, 0, 0, 0, 219, 48, 1, 0, 0, 0, 220, 221, 5, 103,
		0, 0, 221, 225, 5, 101, 0, 0, 222, 223, 5, 71, 0, 0, 223, 225, 5, 69, 0,
		0, 224, 220, 1, 0, 0, 0, 224, 222, 1, 0, 0, 0, 225, 50, 1, 0, 0, 0, 226,
		227, 5, 108, 0, 0, 227, 231, 5, 101, 0, 0, 228, 229, 5, 76, 0, 0, 229,
		231, 5, 69, 0, 0, 230, 226, 1, 0, 0, 0, 230, 228, 1, 0, 0, 0, 231, 52,
		1, 0, 0, 0, 232, 233, 5, 99, 0, 0, 233, 237, 5, 111, 0, 0, 234, 235, 5,
		67, 0, 0, 235, 237, 5, 79, 0, 0, 236, 232, 1, 0, 0, 0, 236, 234, 1, 0,
		0, 0, 237, 54, 1, 0, 0, 0, 238, 239, 5, 115, 0, 0, 239, 243, 5, 119, 0,
		0, 240, 241, 5, 83, 0, 0, 241, 243, 5, 87, 0, 0, 242, 238, 1, 0, 0, 0,
		242, 240, 1, 0, 0, 0, 243, 56, 1, 0, 0, 0, 244, 245, 5, 101, 0, 0, 245,
		249, 5, 119, 0, 0, 246, 247, 5, 69, 0, 0, 247, 249, 5, 87, 0, 0, 248, 244,
		1, 0, 0, 0, 248, 246, 1, 0, 0, 0, 249, 58, 1, 0, 0, 0, 250, 254, 3, 65,
		32, 0, 251, 253, 3, 61, 30, 0, 252, 251, 1, 0, 0, 0, 253, 256, 1, 0, 0,
		0, 254, 252, 1, 0, 0, 0, 254, 255, 1, 0, 0, 0, 255, 60, 1, 0, 0, 0, 256,
		254, 1, 0, 0, 0, 257, 261, 7, 0, 0, 0, 258, 261, 3, 63, 31, 0, 259, 261,
		3, 65, 32, 0, 260, 257, 1, 0, 0, 0, 260, 258, 1, 0, 0, 0, 260, 259, 1,
		0, 0, 0, 261, 62, 1, 0, 0, 0, 262, 263, 7, 1, 0, 0, 263, 64, 1, 0, 0, 0,
		264, 265, 7, 2, 0, 0, 265, 66, 1, 0, 0, 0, 266, 271, 5, 34, 0, 0, 267,
		270, 3, 69, 34, 0, 268, 270, 8, 3, 0, 0, 269, 267, 1, 0, 0, 0, 269, 268,
		1, 0, 0, 0, 270, 273, 1, 0, 0, 0, 271, 269, 1, 0, 0, 0, 271, 272, 1, 0,
		0, 0, 272, 274, 1, 0, 0, 0, 273, 271, 1, 0, 0, 0, 274, 275, 5, 34, 0, 0,
		275, 68, 1, 0, 0, 0, 276, 279, 5, 92, 0, 0, 277, 280, 7, 4, 0, 0, 278,
		280, 3, 71, 35, 0, 279, 277, 1, 0, 0, 0, 279, 278, 1, 0, 0, 0, 280, 70,
		1, 0, 0, 0, 281, 282, 5, 117, 0, 0, 282, 283, 7, 5, 0, 0, 283, 72, 1, 0,
		0, 0, 284, 286, 5, 45, 0, 0, 285, 284, 1, 0, 0, 0, 285, 286, 1, 0, 0, 0,
		286, 287, 1, 0, 0, 0, 287, 288, 3, 75, 37, 0, 288, 290, 5, 46, 0, 0, 289,
		291, 7, 1, 0, 0, 290, 289, 1, 0, 0, 0, 291, 292, 1, 0, 0, 0, 292, 290,
		1, 0, 0, 0, 292, 293, 1, 0, 0, 0, 293, 295, 1, 0, 0, 0, 294, 296, 3, 81,
		40, 0, 295, 294, 1, 0, 0, 0, 295, 296, 1, 0, 0, 0, 296, 74, 1, 0, 0, 0,
		297, 306, 5, 48, 0, 0, 298, 302, 7, 6, 0, 0, 299, 301, 7, 1, 0, 0, 300,
		299, 1, 0, 0, 0, 301, 304, 1, 0, 0, 0, 302, 300, 1, 0, 0, 0, 302, 303,
		1, 0, 0, 0, 303, 306, 1, 0, 0, 0, 304, 302, 1, 0, 0, 0, 305, 297, 1, 0,
		0, 0, 305, 298, 1, 0, 0, 0, 306, 76, 1, 0, 0, 0, 307, 308, 5, 40, 0, 0,
		308, 78, 1, 0, 0, 0, 309, 310, 5, 41, 0, 0, 310, 80, 1, 0, 0, 0, 311, 313,
		7, 7, 0, 0, 312, 314, 7, 8, 0, 0, 313, 312, 1, 0, 0, 0, 313, 314, 1, 0,
		0, 0, 314, 315, 1, 0, 0, 0, 315, 316, 3, 75, 37, 0, 316, 82, 1, 0, 0, 0,
		317, 318, 5, 10, 0, 0, 318, 84, 1, 0, 0, 0, 319, 323, 5, 44, 0, 0, 320,
		322, 5, 32, 0, 0, 321, 320, 1, 0, 0, 0, 322, 325, 1, 0, 0, 0, 323, 321,
		1, 0, 0, 0, 323, 324, 1, 0, 0, 0, 324, 86, 1, 0, 0, 0, 325, 323, 1, 0,
		0, 0, 326, 330, 5, 32, 0, 0, 327, 329, 3, 83, 41, 0, 328, 327, 1, 0, 0,
		0, 329, 332, 1, 0, 0, 0, 330, 328, 1, 0, 0, 0, 330, 331, 1, 0, 0, 0, 331,
		88, 1, 0, 0, 0, 332, 330, 1, 0, 0, 0, 28, 0, 161, 168, 179, 188, 194, 200,
		206, 212, 218, 224, 230, 236, 242, 248, 254, 260, 269, 271, 279, 285, 292,
		295, 302, 305, 313, 323, 330, 0,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// SCIMQueryLexerInit initializes any static state used to implement SCIMQueryLexer. By default the
// static state used to implement the lexer is lazily initialized during the first call to
// NewSCIMQueryLexer(). You can call this function if you wish to initialize the static state ahead
// of time.
func SCIMQueryLexerInit() {
	staticData := &SCIMQueryLexerLexerStaticData
	staticData.once.Do(scimquerylexerLexerInit)
}

// NewSCIMQueryLexer produces a new lexer instance for the optional input antlr.CharStream.
func NewSCIMQueryLexer(input antlr.CharStream) *SCIMQueryLexer {
	SCIMQueryLexerInit()
	l := new(SCIMQueryLexer)
	l.BaseLexer = antlr.NewBaseLexer(input)
	staticData := &SCIMQueryLexerLexerStaticData
	l.Interpreter = antlr.NewLexerATNSimulator(l, staticData.atn, staticData.decisionToDFA, staticData.PredictionContextCache)
	l.channelNames = staticData.ChannelNames
	l.modeNames = staticData.ModeNames
	l.RuleNames = staticData.RuleNames
	l.LiteralNames = staticData.LiteralNames
	l.SymbolicNames = staticData.SymbolicNames
	l.GrammarFileName = "SCIMQuery.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// SCIMQueryLexer tokens.
const (
	SCIMQueryLexerT__0             = 1
	SCIMQueryLexerT__1             = 2
	SCIMQueryLexerT__2             = 3
	SCIMQueryLexerT__3             = 4
	SCIMQueryLexerT__4             = 5
	SCIMQueryLexerT__5             = 6
	SCIMQueryLexerT__6             = 7
	SCIMQueryLexerT__7             = 8
	SCIMQueryLexerT__8             = 9
	SCIMQueryLexerT__9             = 10
	SCIMQueryLexerT__10            = 11
	SCIMQueryLexerT__11            = 12
	SCIMQueryLexerT__12            = 13
	SCIMQueryLexerT__13            = 14
	SCIMQueryLexerT__14            = 15
	SCIMQueryLexerNOT              = 16
	SCIMQueryLexerLOGICAL_OPERATOR = 17
	SCIMQueryLexerBOOLEAN          = 18
	SCIMQueryLexerNULL             = 19
	SCIMQueryLexerIN               = 20
	SCIMQueryLexerEQ               = 21
	SCIMQueryLexerNE               = 22
	SCIMQueryLexerGT               = 23
	SCIMQueryLexerLT               = 24
	SCIMQueryLexerGE               = 25
	SCIMQueryLexerLE               = 26
	SCIMQueryLexerCO               = 27
	SCIMQueryLexerSW               = 28
	SCIMQueryLexerEW               = 29
	SCIMQueryLexerATTRNAME         = 30
	SCIMQueryLexerSTRING           = 31
	SCIMQueryLexerDOUBLE           = 32
	SCIMQueryLexerINT              = 33
	SCIMQueryLexerLPAREN           = 34
	SCIMQueryLexerRPAREN           = 35
	SCIMQueryLexerEXP              = 36
	SCIMQueryLexerNEWLINE          = 37
	SCIMQueryLexerCOMMA            = 38
	SCIMQueryLexerSP               = 39
)
